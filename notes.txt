### How to create a package from scratch
# url: https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
library(devtools)
library(roxygen2)
create('my_package')
# update DESCRIPTION file
# write function inside R dir with documentation
document('ioutil')
install('ioutil')

### how to install your package from github
install_github(repo = 'alorchhota/autil', subdir = 'ioutil')

### Dependencies on other packages
# described in DESCRIPTION
# Dependencies: loads packages with the current one
# Imports: these packages are installed when current package is installed, but not loaded until required.
# Suggests: similar to imports, but not necessary for the package. may be used in examples.
# use "require(pkg)" inside the function where pkg is needed.
# use "biocViews:" in DESCRIPTION file for bioconductor packages.
# install non-standard packages: https://cran.r-project.org/web/packages/devtools/vignettes/dependencies.html


### how to add references in documentation
# url: https://cran.r-project.org/web/packages/Rdpack/vignettes/Inserting_bibtex_references.pdf


### how to include multiple functions in one documentation file
# url: https://gist.github.com/jefferys/b79fe87314b0dc72fec9


### unit test
# url: http://r-pkgs.had.co.nz/tests.html
library(usethis)
library(testthat)
proj_set('miscutil')
use_testthat()
# create a test file inside tests/testthat/
# the test file name must start with "test"
# sample code for a test file
context("parse_delimitted_string tests")
library(miscutil)
test_that("parse delimitter", {
  x = "one,two,three,"
  expect_equal(length(parse_delimitted_string(x)),3)
  expect_equal(length(parse_delimitted_string(x, rm.empty = F)),4)
  expect_equal(length(parse_delimitted_string(x, delim = 'w', rm.empty = F)),2)
  expect_match(parse_delimitted_string(x)[1],'one')
  expect_is(parse_delimitted_string(x), 'character')
})
# sample code ends for a test file
devtools::test('miscutil') # executes all tests in miscutil package


### Data in package
# url: http://r-pkgs.had.co.nz/data.html
library(devtools)
library(usethis)
# make/read your data
gene_mappability = data.frame(gene=paste0('Gene',1:10), mappability=seq(0.1,1,0.1), stringsAsFactor = F)
cross_mappability = data.frame(from=paste0('Gene',c(1,3,1,5,2,9,10,2,2,3)), 
                               to=paste0('Gene',c(2,1,9,2,3,1,3,10,3,5)),
                               crossmap=1:10)
library(ioutil)
gene_mappability_fn = "~/Downloads/hg19_crossmap/hg19_gencode19_75merExon_36merUTR_2mismatch_gene_mappability.txt"
gene_mappability = read_df(gene_mappability_fn, header = F, row.names = F)
colnames(gene_mappability) = c('gene','mappability')
rownames(gene_mappability) = gene_mappability$gene
cross_mappability_fn = "~/Downloads/hg19_crossmap/hg19_gencode19_75merExon_36merUTR_2mismatch_cross_mappability.txt"
cross_mappability = read_df(cross_mappability_fn, header = F, row.names = F)
colnames(cross_mappability) = c('from', 'to', 'crossmap')
# create package
create_package('crossmap.hg19.gencode19.75merExon.36merUTR.2mismatch')
# which data to use : create documents for them
proj_set('crossmap.hg19.gencode19.75merExon.36merUTR.2mismatch')
use_data(gene_mappability, cross_mappability)
# make an R file in R/ and add documentation
